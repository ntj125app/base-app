name: Build App Container Image for Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }} # github.repository as <account>/<repo>

jobs:
  build-app: # Steps to build production application
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      composer-cache: ${{ steps.composer-cache-dir.outputs.dir }}
      npm-cache: ${{ steps.npm-cache-dir.outputs.dir }}
    
    steps:
      - name: Checkout # Checkout the repository
        uses: actions/checkout@v3

      - name: Create .env file # Create .env file
        run: echo "${{ secrets.ENV_BASE64 }}" | base64 -d > .env

      # Composer Cache
      - name: Get Composer Cache Directory
        id: composer-cache-dir
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Composer Cache
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      - name: Vendor Cache # Cache vendor directory
        id: vendor-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-vendor-${{ hashFiles('**/composer.lock') }}
      - name: Composer Install # Install composer dependencies
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: composer install --optimize-autoloader --no-dev --ignore-platform-reqs

      # Bootstrap Artifacts
      - name: Application Cache # Application Cache
        id: laravel-app-cache
        uses: actions/cache@v3
        with:
          path: |
            bootstrap/cache
            storage/framework/cache
            storage/framework/sessions
            storage/framework/testing
            storage/framework/views
            storage/logs
          key: ${{ runner.os }}-laravel-${{ github.sha }}
      - name: Laravel Build Cache # Laravel Build Cache
        if: steps.laravel-app-cache.outputs.cache-hit != 'true'
        run: |
          php artisan config:cache
          php artisan event:cache
          php artisan route:cache
          php artisan view:cache

      # NPM Cache
      - name: Set NodeJS Version # Set NodeJS Version
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: NPM Build Cache # NPM Build Cache
        id: npm-build-cache
        uses: actions/cache@v3
        with:
          path: public/build
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: NPM CI Install # Install NPM dependencies (node_modules folder is not cached)
        run: npm ci
        if: steps.npm-build-cache.outputs.cache-hit != 'true'
      - name: NPM Build # Build NPM assets
        if: steps.npm-build-cache.outputs.cache-hit != 'true'
        run: npm run build

  prepare-image: # Steps to prepare build image
    if: ${{ github.event_name != 'pull_request' }}
    needs: build-app
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout # Checkout the repository
        uses: actions/checkout@v3

      - name: Restore Vendor Cache # Restore vendor cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-vendor-${{ hashFiles('**/composer.lock') }}
      - name: Restore Application Cache # Restore application cache
        uses: actions/cache@v3
        with:
          path: |
            bootstrap/cache
            storage/framework/cache
            storage/framework/sessions
            storage/framework/testing
            storage/framework/views
            storage/logs
          key: ${{ runner.os }}-laravel-${{ hashFiles('**/composer.lock') }}
      - name: Restore NPM Build Cache # Restore NPM build cache
        uses: actions/cache@v3
        with:
          path: public/build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Setup Prepare Image Cache # Setup Prepare Image Cache
        id: prepare-image-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-prepare-image-${{ github.run_id }}

      - name: Clean Build App # Remove unused files & dirs
        run: rm -rf node_modules public/debug.php resources/css resources/fonts resources/images resources/js resources/vue stubs tests .editorconfig .env.example .git .gitattributes .gitignore .styleci.yml axiom-sublime.sublime-project axiom-sublime.sublime-workspace cloudbuild.yaml composer.json composer.lock package-lock.json package.json phpunit.xml PROJECT.md README.md server.php tailwind.config.js webpack.mix.js tsconfig.json tsconfig.node.json vite.config.ts postcss.config.js .vscode LOGLEVEL.md .github

  build-package: # Steps to build package
    if: ${{ github.event_name != 'pull_request' }}
    needs: prepare-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout # Checkout the repository
        uses: actions/checkout@v3

      - name: Restore Prepare Image Cache # Restore prepare image cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}
          key: ${{ runner.os }}-prepare-image-${{ github.run_id }}

      - name: Setup QEMU # Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx # Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry # Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get & Set Container Metadata # Get & Set Container Metadata
        id: meta-packages
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build & Push Container # Build & Push Container
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-packages.outputs.tags }}
          labels: ${{ steps.meta-packages.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max