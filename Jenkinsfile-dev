pipeline {
    agent any

    environment {
        ENV_KEY = credentials('env-key')
        REGISTRY_CREDS = credentials('docker-app-images-registry')
        GIT_SHA_INFO = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }

    options {
        skipDefaultCheckout()
    }

    stages {
        stage('Docker Login, Reset Directory Permissions, Clear Workspace and Checkout') {
            steps {
                sh 'docker login -u $REGISTRY_CREDS_USR -p $REGISTRY_CREDS_PSW '+REGISTRY_PREFIX+REGISTRY
                cleanWs(cleanWhenNotBuilt: true,
                        deleteDirs: true,
                        disableDeferredWipeout: true,
                        notFailBuild: true)
                sh 'docker buildx use default'
                sh 'docker buildx stop buildkit-$IMAGE_NAME-$IMAGE_TAG || true'
                sh 'docker buildx rm -f --all-inactive'
                sh 'docker buildx prune -f'
                checkout scm
            }
        }
        stage('Build Container') {
            steps {
                sh 'ls -lah'
                sh 'docker buildx create --use --config /home/jenkins/agent/buildkit.toml --name buildkit-$IMAGE_NAME-$IMAGE_TAG'
                sh 'docker buildx build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG . --push --build-arg ENV_KEY=$ENV_KEY --build-arg APP_VERSION_HASH=$GIT_SHA_INFO --build-arg ENV_TYPE=dev'
                sh 'docker buildx prune -f'
                sh 'docker buildx use default'
                sh 'docker buildx stop buildkit-$IMAGE_NAME-$IMAGE_TAG || true'
                sh 'docker buildx rm -f --all-inactive'
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    sh 'docker system prune -f || true'
                }
            }
        }
    }
}